entity_type: Lab
schema_version: 2
default_local: en

title: FortiGate: Automating deployment and configuration using Terraform 2

description: "Learn how to automate deployment and configuration of FortiGate using Terraform."

duration: 45
level: Intermediate
tags: [gcp, terraform, fortigate, firewall, security, network, infrastructure as code]

instruction:
  type: md
  uri: instructions/en.md

resources:
- type: link
  id: fos-provider
  title:
    locales:
      en: FortiOS terraform provider documentation
  uri:
    locales:
      en: https://registry.terraform.io/providers/fortinetdev/fortios/latest/docs

environment:
  resources:
  - type: gcp_project
    id: main_project
  - type: gcp_user
    id: user
    permissions:
    - project: main_project
      roles:
      - roles/compute.admin
      - roles/editor
  - type: cloud_terminal
    id: shell
    permissions:
    - project: main_project
      roles:
      - roles/editor
  student_visible_outputs:
  - label: "GCP Username"
    reference: user.username
  - label: "GCP Password"
    reference: user:password

assessment:
  passing_percentage: 100
  steps:
  - title: Clone repository
    maximum_score: 20
    student_messages:
      success: Good job! You cloned the necessary terraform code from GitHub.
      fail: Please clone the repository using git clone command
    services:
    - shell.RunRemoteCommand
    code: |-
      def check(handles:, maximum_score:, resources:)
        shell = handles['shell.RunRemoteCommand']
        response = shell.run_remote_command 'find . --name main.tf'
        if response.stdout > 0
          { score: maximum_score, student_message: 'success' }
        else
          { score: 0, student_message: 'fail' }
        end
      end
  - title: Deploy FortiGates
    maximum_score: 40
    student_messages:
      success: Great! Your FortiGates are running and ready to protect your cloud resources.
      fail: Please init, plan and apply the day0 terraform module
    services:
    - project.ComputeV1
    code: |-
      def check(handles:, maximum_score:, resources:)
        compute = handles['project.ComputeV1']
        instances = compute.list_aggregated_instances(filter="tags=[fgt]")&.items
        if instances.count == 2
          { score: maximum_score, student_message: 'success' }
        else
          { score: 0, student_message: 'fail' }
        end
      end
  - title: Deploy protected web application
    maximum_score: 40
    student_messages:
      success: Great! Your new web service is protected by FortiGate.
      fail: Please init, plan and apply the dayN terraform module
    services:
    - project.ComputeV1
    code: |-
      def check(handles:, maximum_score:, resources:)
        compute = handles['project.ComputeV1']
        instances = compute.list_aggregated_instances(filter="name=websrv")&.items
        if instances.count > 0
          { score: maximum_score, student_message: 'success' }
        else
          { score: 0, student_message: 'fail' }
        end
      end
